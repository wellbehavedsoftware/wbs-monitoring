#!/bin/bash

set -euf -o pipefail

version="$1"

targets=(
	"trusty"
	"xenial"
)

dist="ubuntu@kiara-dist.vpn.wbsoft.co:dist/wbs-monitoring"

function header () {
	echo "" >&2
	echo "#################### $1" >&2
	echo "" >&2
}

function notice () {
	echo "  $1" >&2
}

# ---------- check the version number

if test -f ".git/refs/tags/$version"; then

	header "Sanity check failed"

	notice "Version $version already exists"
	notice "Build aborted"

	notice ""

	false

fi

# ---------- update the version number

header "Preparing for build"

notice "Updating version number in Cargo.toml"

sed_script="/tmp/sed-script-$$"

cat >"$sed_script" <<-END
	/^\[package\]$/, /^\[/ {
		s/version = ".*"/version = "$version\"/
	}
END

sed --in-place \
	--regexp-extended \
	--file "$sed_script" \
	"Cargo.toml"

rm "$sed_script"

# ---------- perform local build

header "Building locally"

cargo build

# ---------- create the archive to build

header "Creating source archive"

project_source="wbs-monitoring-$version"

mkdir -p "dist"

rsync \
	--archive \
	--delete \
	--delete-excluded \
	--exclude "/.git" \
	--exclude "/dist" \
	--exclude "/target" \
	--exclude "/work" \
	--exclude "*.o" \
	--exclude "*.a" \
	"./" \
	"dist/$project_source/"

tar --create --xz \
	--file "dist/$project_source.tar.xz" \
	--directory "dist" \
	"$project_source"

# ---------- iterate targets

for target in "${targets[@]}"; do

	header "Building for $target"

	project_target="$project_source-$target"

	# ---------- sync to target

	lxc file push \
		"dist/$project_source.tar.xz" \
		"build-$target/root/$project_source.tar.xz"

	lxc exec "build-$target" -- \
		rm -rf "$project_source"

	lxc exec "build-$target" -- \
		tar --extract --xz --file "$project_source.tar.xz"

	# ---------- update rust

	lxc exec "build-$target" -- \
		bash -c \"
			source \$HOME/.cargo/env \; \
			rustup update
		\"

	# ---------- build

	lxc exec "build-$target" -- \
		bash -c \"
			source \$HOME/.cargo/env \; \
			"$project_source/scripts/build-package" \
			"$version" \
			"$target" \
		\"

	# ---------- retrieve

	lxc file pull \
		"build-$target/root/$project_source/dist/$project_target.tar.xz" \
		"dist/$project_target.tar.xz"

done

# ---------- git commit

header "Finalising"

notice "Committing changes to git"

git reset "HEAD"
git add "Cargo.toml" "Cargo.lock"
git commit --message "release $version"
git stash --include-untracked

# ---------- upload to server

notice "Uploading $project_source.tar.xz to dist"

scp \
	"dist/$project_source.tar.xz" \
	"dist:dist/wbs-monitoring/"

for target in "${targets[@]}"; do

	notice "Uploading $project_source-$target.tar.xz to dist"

	scp \
		"dist/$project_source-$target.tar.xz" \
		"$dist/"

done

# ---------- create tag

notice "Pushing changes to git"

git tag "$version"
git push origin master --tags

header "Build complete"

# ex: noet ts=4 filetype=sh
